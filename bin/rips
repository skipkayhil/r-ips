#!/usr/bin/env ruby
# frozen-string-literal: true

require "optparse"

OPTIONS = { i: 10_000 }
OptionParser.new do |parser|
  parser.on("-a [A]", ["ips", "mem", "profile"], "Action")
  parser.on("-i [I]", Integer, "Iterations (default: 10000)")
end.parse!(into: OPTIONS)

case OPTIONS[:a]
when "ips"
  require "benchmark/ips"
when "mem"
  require "memory_profiler"
when "profile"
  require "vernier"
end

require "bundler/inline"

gemfile do
  source "https://rubygems.org"

  git_source(:github) { |repo| "https://github.com/#{repo}.git" }

  gem "rails", github: "rails/rails", require: false
end

ENV["RAILS_ENV"] = "production"

app_file = ARGV.first
require File.expand_path("../#{app_file}", __dir__)

env = {
  "REQUEST_METHOD" => "GET",
  "SCRIPT_NAME" => "",
  "rack.input" => File.open("/dev/null"),
  "PATH_INFO" => "/a/a",
}.freeze

envs = (1..OPTIONS[:i]).map { env.dup }

case OPTIONS[:a]
when "profile"
  Vernier.trace(out: "tmp/time_profile.json") do
    envs.each { App.call(_1) }
  end
when "mem"
  report = MemoryProfiler.report do
    envs.each { App.call(_1) }
  end

  report.pretty_print
when "ips"
  Benchmark.ips do |x|
    x.report("1 request") { App.call(env.dup) }
    x.compare!
  end
else
  response = App.call(envs[0])
  binding.irb
end
